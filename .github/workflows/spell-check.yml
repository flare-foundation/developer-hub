name: Spell Check

on:
  pull_request:
    paths:
      - "**/*.md"
      - "**/*.mdx"
      - "**/*.txt"
      - "**/*.yml"
      - "**/*.yaml"
      - "**/*.py"
      - "**/*.js"
      - "**/*.ts"
      - "**/*.html"
      - "**/*.rst"
      - "**/*.go"
      - "!**/*.svg" # Exclude svg files from triggering the workflow
      - "!**/*.sum"
      - "!**/*.mod"

jobs:
  spell-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to ensure proper diffs

      - name: List Changed Files
        id: changed-files
        run: |
          git fetch origin ${{ github.base_ref }} --depth=1 || true
          if [ -z "$(git rev-parse ${{ github.event.before }} 2>/dev/null)" ]; then
            echo "First push or invalid 'before' hash detected. Checking all files."
            git ls-files > changed-files.txt
          else
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed-files.txt
          fi
          grep -E '\.(md|mdx|txt|yml|yaml|py|js|ts|html|rst|go)$' changed-files.txt > files-to-check.txt || {
            echo "No files to check. Skipping spell check."
            exit 0
          }

      - name: Debug Changed Files
        run: |
          echo "Files to check:"
          cat files-to-check.txt

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install codespell
        run: pip install codespell

      - name: Run Spell Check
        run: |
          codespell \
            --ignore-words=.github/config/ignored-words.txt \
            --skip="*.svg,*.png,*.jpg,*.woff,*.woff2,*.pdf,*.json,package-lock.json" \
            --quiet-level=2 \
            --check-filenames \
            --files-from=files-to-check.txt \
            > codespell-output.txt || true

      - name: Display Spell Check Output
        run: |
          echo "Detected typos:"
          cat codespell-output.txt

      - name: Annotate Spelling Errors
        if: failure()
        run: |
          while read -r line; do
            file=$(echo "$line" | awk '{print $1}')
            line_number=$(echo "$line" | awk '{print $2}' | sed 's/://')
            typo=$(echo "$line" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}')
            echo "::error file=$file,line=$line_number::Typo detected: $typo"
          done < codespell-output.txt
