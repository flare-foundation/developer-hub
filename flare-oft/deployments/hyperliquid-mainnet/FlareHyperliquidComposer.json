{
    "address": "0xFa5C61c57dc478d5f3dDcC5185CB118414C5E756",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_oft",
            "type": "address"
          },
          {
            "internalType": "uint64",
            "name": "_hlIndexId",
            "type": "uint64"
          },
          {
            "internalType": "int8",
            "name": "_assetDecimalDiff",
            "type": "int8"
          },
          {
            "internalType": "address",
            "name": "_recoveryAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "length",
            "type": "uint256"
          }
        ],
        "name": "ComposeMsgLengthNot64Bytes",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "CoreUserNotActivated",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "guid",
            "type": "bytes32"
          }
        ],
        "name": "FailedMessageNotFound",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "gasLeft",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "minGas",
            "type": "uint256"
          }
        ],
        "name": "InsufficientGas",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "msgValue",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "requiredValue",
            "type": "uint256"
          }
        ],
        "name": "InsufficientMsgValue",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "internalOFTAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "receivedOFTAddress",
            "type": "address"
          }
        ],
        "name": "InvalidComposeCaller",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "int8",
            "name": "decimalDiff",
            "type": "int8"
          },
          {
            "internalType": "int8",
            "name": "minDecimalDiff",
            "type": "int8"
          },
          {
            "internalType": "int8",
            "name": "maxDecimalDiff",
            "type": "int8"
          }
        ],
        "name": "InvalidDecimalDiff",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "InvalidOFTAddress",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "maxAmount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "requestedAmount",
            "type": "uint256"
          }
        ],
        "name": "MaxRetrieveAmountExceeded",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "NativeTransferFailed",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NotRecoveryAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "OnlyEndpoint",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "caller",
            "type": "address"
          }
        ],
        "name": "OnlySelf",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ReentrancyGuardReentrantCall",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "name": "SafeERC20FailedOperation",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "internalType": "uint64",
            "name": "tokenId",
            "type": "uint64"
          }
        ],
        "name": "SpotBalanceReadFailed",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amt",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "maxAmt",
            "type": "uint256"
          }
        ],
        "name": "TransferAmtExceedsAssetBridgeBalance",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TransferFailed",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [],
        "name": "CompleteRefund",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "guid",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "sender",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "msgValue",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "composeMessage",
            "type": "bytes"
          }
        ],
        "name": "FailedMessageDecode",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "Recovered",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "amountERC20",
            "type": "uint256"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "amountHYPE",
            "type": "uint256"
          }
        ],
        "name": "RefundHyperEVM",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "guid",
            "type": "bytes32"
          }
        ],
        "name": "RefundSuccessful",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint64",
            "name": "coreIndexId",
            "type": "uint64"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          }
        ],
        "name": "Retrieved",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "ENDPOINT",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "ERC20",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "ERC20_ASSET_BRIDGE",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "ERC20_CORE_INDEX_ID",
        "outputs": [
          {
            "internalType": "uint64",
            "name": "",
            "type": "uint64"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "ERC20_DECIMAL_DIFF",
        "outputs": [
          {
            "internalType": "int8",
            "name": "",
            "type": "int8"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "FULL_TRANSFER",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "MAX_DECIMAL_DIFF",
        "outputs": [
          {
            "internalType": "int8",
            "name": "",
            "type": "int8"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "MIN_DECIMAL_DIFF",
        "outputs": [
          {
            "internalType": "int8",
            "name": "",
            "type": "int8"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "MIN_GAS",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "MIN_GAS_WITH_VALUE",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "NATIVE_ASSET_BRIDGE",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "NATIVE_CORE_INDEX_ID",
        "outputs": [
          {
            "internalType": "uint64",
            "name": "",
            "type": "uint64"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "NATIVE_DECIMAL_DIFF",
        "outputs": [
          {
            "internalType": "int8",
            "name": "",
            "type": "int8"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "OFT",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "RECOVERY_ADDRESS",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "SPOT_SEND_HEADER",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "USDC_CORE_INDEX",
        "outputs": [
          {
            "internalType": "uint64",
            "name": "",
            "type": "uint64"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "VALID_COMPOSE_MSG_LEN",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          }
        ],
        "name": "coreUserExists",
        "outputs": [
          {
            "components": [
              {
                "internalType": "bool",
                "name": "exists",
                "type": "bool"
              }
            ],
            "internalType": "struct CoreUserExists",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "_composeMessage",
            "type": "bytes"
          }
        ],
        "name": "decodeMessage",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "minMsgValue",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "guid",
            "type": "bytes32"
          }
        ],
        "name": "failedMessages",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint32",
                "name": "dstEid",
                "type": "uint32"
              },
              {
                "internalType": "bytes32",
                "name": "to",
                "type": "bytes32"
              },
              {
                "internalType": "uint256",
                "name": "amountLD",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "minAmountLD",
                "type": "uint256"
              },
              {
                "internalType": "bytes",
                "name": "extraOptions",
                "type": "bytes"
              },
              {
                "internalType": "bytes",
                "name": "composeMsg",
                "type": "bytes"
              },
              {
                "internalType": "bytes",
                "name": "oftCmd",
                "type": "bytes"
              }
            ],
            "internalType": "struct SendParam",
            "name": "refundSendParam",
            "type": "tuple"
          },
          {
            "internalType": "uint256",
            "name": "msgValue",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_amountLD",
            "type": "uint256"
          }
        ],
        "name": "handleTransfersToHyperCore",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_oft",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "_guid",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "_message",
            "type": "bytes"
          },
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "name": "lzCompose",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint64",
            "name": "_coreIndexId",
            "type": "uint64"
          },
          {
            "internalType": "int8",
            "name": "_decimalDiff",
            "type": "int8"
          },
          {
            "internalType": "address",
            "name": "_bridgeAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_amountLD",
            "type": "uint256"
          }
        ],
        "name": "quoteHyperCoreAmount",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "evm",
                "type": "uint256"
              },
              {
                "internalType": "uint64",
                "name": "core",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "coreBalanceAssetBridge",
                "type": "uint64"
              }
            ],
            "internalType": "struct IHyperAssetAmount",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_evmAmount",
            "type": "uint256"
          }
        ],
        "name": "recoverEvmERC20",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_evmAmount",
            "type": "uint256"
          }
        ],
        "name": "recoverEvmNative",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "_guid",
            "type": "bytes32"
          }
        ],
        "name": "refundToSrc",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint64",
            "name": "_coreAmount",
            "type": "uint64"
          }
        ],
        "name": "retrieveCoreERC20",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint64",
            "name": "_coreAmount",
            "type": "uint64"
          }
        ],
        "name": "retrieveCoreHYPE",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint64",
            "name": "_coreAmount",
            "type": "uint64"
          },
          {
            "internalType": "address",
            "name": "_to",
            "type": "address"
          }
        ],
        "name": "retrieveCoreUSDC",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "internalType": "uint64",
            "name": "token",
            "type": "uint64"
          }
        ],
        "name": "spotBalance",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint64",
                "name": "total",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "hold",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "entryNtl",
                "type": "uint64"
              }
            ],
            "internalType": "struct SpotBalance",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "stateMutability": "payable",
        "type": "receive"
      }
    ],
    "transactionHash": "0xac07a814324387f6ccd33069ebb5495bcd36eec9720dd5bc40cfdabd817efe82",
    "receipt": {
      "to": null,
      "from": "0xE6408ECCeE31ad37A41F52E78f3E8640026D2534",
      "contractAddress": "0xFa5C61c57dc478d5f3dDcC5185CB118414C5E756",
      "transactionIndex": 6,
      "gasUsed": "2501224",
      "logsBloom": "0x
      "blockHash": "0x289b22b7f63420dbdc93251e35ccd5fa07a1e183e8b3ac01163832f47f7ad31f",
      "transactionHash": "0xac07a814324387f6ccd33069ebb5495bcd36eec9720dd5bc40cfdabd817efe82",
      "logs": [],
      "blockNumber": 13697417,
      "cumulativeGasUsed": "4297444",
      "status": 1,
      "byzantium": true
    },
    "args": [
      "0x579292c42356dd9907dFB2c25E59bbdEdB5b8dc9",
      351,
      10,
      "0x64C1d4388118fC4FdEd8943A59a86D03965575bC"
    ],
    "numDeployments": 1,
    "solcInputHash": "35cbb09d33ec4b9cfd91b7def3284194",
    "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_hlIndexId\",\"type\":\"uint64\"},{\"internalType\":\"int8\",\"name\":\"_assetDecimalDiff\",\"type\":\"int8\"},{\"internalType\":\"address\",\"name\":\"_recoveryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ComposeMsgLengthNot64Bytes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoreUserNotActivated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"}],\"name\":\"FailedMessageNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minGas\",\"type\":\"uint256\"}],\"name\":\"InsufficientGas\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredValue\",\"type\":\"uint256\"}],\"name\":\"InsufficientMsgValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"internalOFTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivedOFTAddress\",\"type\":\"address\"}],\"name\":\"InvalidComposeCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int8\",\"name\":\"decimalDiff\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"minDecimalDiff\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"maxDecimalDiff\",\"type\":\"int8\"}],\"name\":\"InvalidDecimalDiff\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOFTAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"name\":\"MaxRetrieveAmountExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRecoveryAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OnlySelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"tokenId\",\"type\":\"uint64\"}],\"name\":\"SpotBalanceReadFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmt\",\"type\":\"uint256\"}],\"name\":\"TransferAmtExceedsAssetBridgeBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CompleteRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"composeMessage\",\"type\":\"bytes\"}],\"name\":\"FailedMessageDecode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountERC20\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountHYPE\",\"type\":\"uint256\"}],\"name\":\"RefundHyperEVM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"}],\"name\":\"RefundSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"coreIndexId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Retrieved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ENDPOINT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_ASSET_BRIDGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_CORE_INDEX_ID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_DECIMAL_DIFF\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FULL_TRANSFER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DECIMAL_DIFF\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DECIMAL_DIFF\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_GAS_WITH_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_ASSET_BRIDGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_CORE_INDEX_ID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_DECIMAL_DIFF\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECOVERY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPOT_SEND_HEADER\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_CORE_INDEX\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALID_COMPOSE_MSG_LEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"coreUserExists\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct CoreUserExists\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_composeMessage\",\"type\":\"bytes\"}],\"name\":\"decodeMessage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minMsgValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"}],\"name\":\"failedMessages\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraOptions\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"composeMsg\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"oftCmd\",\"type\":\"bytes\"}],\"internalType\":\"struct SendParam\",\"name\":\"refundSendParam\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"}],\"name\":\"handleTransfersToHyperCore\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"lzCompose\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_coreIndexId\",\"type\":\"uint64\"},{\"internalType\":\"int8\",\"name\":\"_decimalDiff\",\"type\":\"int8\"},{\"internalType\":\"address\",\"name\":\"_bridgeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"}],\"name\":\"quoteHyperCoreAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"evm\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"core\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"coreBalanceAssetBridge\",\"type\":\"uint64\"}],\"internalType\":\"struct IHyperAssetAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_evmAmount\",\"type\":\"uint256\"}],\"name\":\"recoverEvmERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_evmAmount\",\"type\":\"uint256\"}],\"name\":\"recoverEvmNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"}],\"name\":\"refundToSrc\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_coreAmount\",\"type\":\"uint64\"}],\"name\":\"retrieveCoreERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_coreAmount\",\"type\":\"uint64\"}],\"name\":\"retrieveCoreHYPE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_coreAmount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"retrieveCoreUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"token\",\"type\":\"uint64\"}],\"name\":\"spotBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"total\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"hold\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryNtl\",\"type\":\"uint64\"}],\"internalType\":\"struct SpotBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"LayerZero Labs (shankars99)\",\"details\":\"This contract is a composer that allows transfers of ERC20 and HYPE tokens to a target address on hypercore.This contract does NOT refund dust to the receiver because we do not expect any due to truncation of sharedDecimals.Incase of dust, you would have to implement dust refunds to the receiver in:      `_transferERC20ToHyperCore` and `_transferNativeToHyperCore`Disclaimer: If the token's evm total supply exceeds the asset bridge's balance when scaled to EVM, it is possible      that the composer will not be able to send the tokens to the receiver address on hypercore due to bridge consumption.      Tokens would instead be returned to the sender address on HyperEVM. Front-end handling is recommended.\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"Recovered(address,uint256)\":{\"details\":\"Recovery is the process of pulling tokens from the composer on hyperevm to the recovery address\"},\"Retrieved(uint64,uint256,address)\":{\"details\":\"Retrieved is the process of moving tokens at the composer from HyperCore to HyperEVM\"}},\"kind\":\"dev\",\"methods\":{\"MIN_GAS()\":{\"details\":\"Minimum gas to be supplied to the composer contract for execution to prevent Out of Gas.This is used when the compose message does NOT have msg.value to send user funds to the receiver on core.This is the minimum gas amt for the compose operations which means the contract should be called with some more gas.\",\"returns\":{\"_0\":\"The minimum gas amount\"}},\"MIN_GAS_WITH_VALUE()\":{\"details\":\"Minimum gas to be supplied to the composer contract for execution to prevent Out of Gas.This is used when the compose message has msg.value to send user funds to the receiver on core.This is the minimum gas amt for the compose operations which means the contract should be called with some more gas.\",\"returns\":{\"_0\":\"The minimum gas amount\"}},\"constructor\":{\"params\":{\"_assetDecimalDiff\":\"The difference in decimals between the HyperEVM's ERC20 and the HyperLiquid HIP-1 token                 (i.e. 18 decimals on evm and 6 on HyperLiquid would be 18 - 6 = 12)\",\"_hlIndexId\":\"The HyperLiquid core spot's index value\",\"_oft\":\"The address of the OFT\",\"_recoveryAddress\":\"The address that will be authorized to perform recovery operations\"}},\"decodeMessage(bytes)\":{\"params\":{\"_composeMessage\":\"The encoded compose message\"},\"returns\":{\"minMsgValue\":\"- The minimum message value required\",\"to\":\"- The receiver address\"}},\"handleTransfersToHyperCore(address,uint256)\":{\"details\":\"Transfers native and erc20 to HyperCore via asset bridge, then to receiver via CoreWriter. Returns dust to HyperEVM.If either fails then we complete refund the user on HyperEVMDefault behavior checks if the user is activated on HyperCore in ERC20 transfer, if not then revert this callIf the user requests for more funds than the asset bridge's balance we revert\"},\"lzCompose(address,bytes32,bytes,address,bytes)\":{\"details\":\"This composer is designed to handle refunds to source to an EOA address and NOT a contractIf the HyperCore receiver is a contract on hyperevm, it is expected that you can control token balance via CoreWriter\",\"params\":{\"_message\":\"The encoded message content, expected to contain a composeMsg that decodes to type: (address receiver, uint256 msgValue)\",\"_oft\":\"The address of the OFT contract.\"}},\"quoteHyperCoreAmount(uint64,int8,address,uint256)\":{\"params\":{\"_amountLD\":\"The number of tokens that the composer received (pre-dusted) that we are trying to send\",\"_bridgeAddress\":\"The asset bridge address of the token to transfer\",\"_coreIndexId\":\"The core index id of the token to transfer\",\"_decimalDiff\":\"The decimal difference of evmDecimals - coreDecimals\"},\"returns\":{\"_0\":\"IHyperAssetAmount - The amount of tokens to send to HyperCore (scaled on evm), dust (to be refunded), and the swap amount (of the tokens scaled on hypercore)\"}},\"recoverEvmERC20(uint256)\":{\"details\":\"Convenience function that recovers tokens to the recovery addressCan only be called by the recovery address\",\"params\":{\"_evmAmount\":\"Amount of ERC20 tokens to recover in EVM decimals, or FULL_TRANSFER for all\"}},\"recoverEvmNative(uint256)\":{\"details\":\"Convenience function that recovers native tokens to the recovery addressCan only be called by the recovery address\",\"params\":{\"_evmAmount\":\"Amount of native tokens to recover in wei, or FULL_TRANSFER for all\"}},\"refundToSrc(bytes32)\":{\"params\":{\"_guid\":\"The GUID of the failed message to refund\"}},\"retrieveCoreERC20(uint64)\":{\"details\":\"Transfers tokens from the composer's HyperCore balance to the OFT asset bridgeCan only be called by the recovery address\",\"params\":{\"_coreAmount\":\"Amount of tokens to retrieve in HyperCore decimals, or FULL_TRANSFER for all\"}},\"retrieveCoreHYPE(uint64)\":{\"details\":\"Transfers HYPE tokens from the composer's HyperCore balance to the HYPE asset bridgeCan only be called by the recovery address\",\"params\":{\"_coreAmount\":\"Amount of HYPE tokens to retrieve in HyperCore decimals, or FULL_TRANSFER for all\"}},\"retrieveCoreUSDC(uint64,address)\":{\"details\":\"Transfers USDC tokens from the composer's HyperCore balance to the specified addressCan only be called by the recovery address\",\"params\":{\"_coreAmount\":\"Amount of USDC tokens to retrieve in HyperCore decimals, or FULL_TRANSFER for all\",\"_to\":\"Destination address to receive the retrieved USDC tokens\"}}},\"title\":\"HyperLiquidComposer_V1\",\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientGas(uint256,uint256)\":[{\"notice\":\"----------------------------------- ERRORS -----------------------------------\"}]},\"events\":{\"RefundSuccessful(bytes32)\":{\"notice\":\"----------------------------------- EVENTS -----------------------------------\"}},\"kind\":\"user\",\"methods\":{\"FULL_TRANSFER()\":{\"notice\":\"Constant indicating a full transfer of available balance\"},\"RECOVERY_ADDRESS()\":{\"notice\":\"Address authorized to perform recovery operations\"},\"USDC_CORE_INDEX()\":{\"notice\":\"Core index ID for USDC on HyperLiquid\"},\"constructor\":{\"notice\":\"Constructor for the HyperLiquidComposer\"},\"decodeMessage(bytes)\":{\"notice\":\"Decodes the compose message to extract minMsgValue and receiver address\"},\"lzCompose(address,bytes32,bytes,address,bytes)\":{\"notice\":\"Handles LayerZero compose operations for hypercore transfers with refund to source and refund on hyperevm functionality\"},\"quoteHyperCoreAmount(uint64,int8,address,uint256)\":{\"notice\":\"External function to quote the conversion of evm tokens to hypercore tokens\"},\"recoverEvmERC20(uint256)\":{\"notice\":\"Recovers ERC20 tokens from HyperEVM to the recovery address\"},\"recoverEvmNative(uint256)\":{\"notice\":\"Recovers native tokens from HyperEVM to the recovery address\"},\"refundToSrc(bytes32)\":{\"notice\":\"Refunds failed messages to the source chain\"},\"retrieveCoreERC20(uint64)\":{\"notice\":\"Retrieves ERC20 tokens from HyperCore back to the asset bridge address\"},\"retrieveCoreHYPE(uint64)\":{\"notice\":\"Retrieves HYPE tokens from HyperCore back to the HYPE asset bridge address\"},\"retrieveCoreUSDC(uint64,address)\":{\"notice\":\"Retrieves USDC tokens from HyperCore to a specified address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HyperLiquidComposer_V1.sol\":\"HyperLiquidComposer_V1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/hyperliquid-composer/contracts/HyperLiquidComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IOFT, SendParam, MessagingFee } from \\\"@layerzerolabs/oft-evm/contracts/interfaces/IOFT.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { OFTComposeMsgCodec } from \\\"@layerzerolabs/oft-evm/contracts/libs/OFTComposeMsgCodec.sol\\\";\\nimport { IOAppCore } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\\\";\\nimport { IOAppComposer } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppComposer.sol\\\";\\nimport { HyperLiquidCore } from \\\"./HyperLiquidCore.sol\\\";\\n\\nimport { HyperLiquidComposerCodec } from \\\"./library/HyperLiquidComposerCodec.sol\\\";\\n\\nimport { IHyperLiquidComposer, IHyperAssetAmount, FailedMessage } from \\\"./interfaces/IHyperLiquidComposer.sol\\\";\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Hyperliquid Composer\\n * @author LayerZero Labs (@shankars99)\\n * @notice This contract is a composer that allows transfers of ERC20 and HYPE tokens to a target address on hypercore.\\n * @dev This address needs to be \\\"activated\\\" on hypercore post deployment\\n * @dev This contract does NOT refund dust to the receiver on HyperEVM because we do not expect any due to truncation of sharedDecimals.\\n            In the off-chance that you have dust you would have to implement dust refunds to the receiver in:\\n            `_transferERC20ToHyperCore` and `_transferNativeToHyperCore`\\n * @dev Disclaimer: If your token's evm total supply exceeds your asset bridge's balance when scaled to EVM, it is possible that the \\n            composer will not be able to send the tokens to the receiver address on hypercore due to bridge consumption. \\n            Tokens would instead be returned to the sender address on HyperEVM.\\n */\\ncontract HyperLiquidComposer is HyperLiquidCore, ReentrancyGuard, IHyperLiquidComposer, IOAppComposer {\\n    using SafeERC20 for IERC20;\\n    using HyperLiquidComposerCodec for *; /// @dev applies to bytes, bytes32, uint256, uint64\\n\\n    uint256 public constant VALID_COMPOSE_MSG_LEN = 64; /// @dev abi.encode(uint256,address) = 32+32\\n\\n    /// @dev decimal difference having range [-2,18] is defined by hyperliquid in their docs\\n    int8 public constant MIN_DECIMAL_DIFF = -2;\\n    int8 public constant MAX_DECIMAL_DIFF = 18;\\n\\n    address public immutable ENDPOINT;\\n    address public immutable OFT;\\n\\n    address public immutable NATIVE_ASSET_BRIDGE;\\n    int8 public immutable NATIVE_DECIMAL_DIFF;\\n    uint64 public immutable NATIVE_CORE_INDEX_ID;\\n\\n    address public immutable ERC20;\\n    address public immutable ERC20_ASSET_BRIDGE;\\n    int8 public immutable ERC20_DECIMAL_DIFF;\\n    uint64 public immutable ERC20_CORE_INDEX_ID;\\n\\n    mapping(bytes32 guid => FailedMessage) public failedMessages;\\n\\n    /**\\n     * @param _oft The OFT contract address associated with this composer\\n     * @param _coreIndexId The core index id of the HyperLiquid L1 contract\\n     * @param _assetDecimalDiff The difference in decimals between the HyperEVM OFT deployment and HyperLiquid L1 HIP-1 listing\\n     */\\n    constructor(address _oft, uint64 _coreIndexId, int8 _assetDecimalDiff) {\\n        if (_oft == address(0)) revert InvalidOFTAddress();\\n\\n        if (_assetDecimalDiff < MIN_DECIMAL_DIFF || _assetDecimalDiff > MAX_DECIMAL_DIFF)\\n            revert InvalidDecimalDiff(_assetDecimalDiff, MIN_DECIMAL_DIFF, MAX_DECIMAL_DIFF);\\n\\n        ENDPOINT = address(IOAppCore(_oft).endpoint());\\n\\n        OFT = _oft;\\n\\n        uint64 hypeCoreIndex = block.chainid == HYPE_CHAIN_ID_MAINNET\\n            ? HYPE_CORE_INDEX_MAINNET\\n            : HYPE_CORE_INDEX_TESTNET;\\n\\n        NATIVE_ASSET_BRIDGE = HYPE_ASSET_BRIDGE;\\n        NATIVE_DECIMAL_DIFF = HYPE_DECIMAL_DIFF;\\n        NATIVE_CORE_INDEX_ID = hypeCoreIndex;\\n\\n        ERC20 = IOFT(OFT).token();\\n        ERC20_ASSET_BRIDGE = _coreIndexId.into_assetBridgeAddress();\\n        ERC20_DECIMAL_DIFF = _assetDecimalDiff;\\n        ERC20_CORE_INDEX_ID = _coreIndexId;\\n    }\\n\\n    /**\\n     * @notice Handles LayerZero compose operations for hypercore transfers with refund to source and refund on hyperevm functionality\\n     * @dev This composer is designed to handle refunds to source to an EOA address and NOT a contract\\n     * @dev If the HyperCore receiver is a contract on hyperevm, it is expected that you can control token balance via CoreWriter\\n     * @param _oft The address of the OFT contract.\\n     * @param _message The encoded message content, expected to contain a composeMsg that decodes to type: (address receiver, uint256 msgValue)\\n     */\\n    function lzCompose(\\n        address _oft,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address /*_executor*/,\\n        bytes calldata /*_extraData*/\\n    ) external payable virtual override nonReentrant {\\n        if (msg.sender != ENDPOINT) revert OnlyEndpoint();\\n        if (OFT != _oft) revert InvalidComposeCaller(address(OFT), _oft);\\n\\n        /// @dev Since these are populated by the OFT contract, we can safely assume they are always decodeable\\n        uint256 amountLD = OFTComposeMsgCodec.amountLD(_message);\\n        bytes memory composeMsgEncoded = OFTComposeMsgCodec.composeMsg(_message);\\n\\n        /// @dev Decode message to get receiver and perform hypercore transfers, store in failedMessages if decode fails\\n        try this.decodeMessage(composeMsgEncoded) returns (uint256 _minMsgValue, address _to) {\\n            if (msg.value < _minMsgValue) revert InsufficientMsgValue(msg.value, _minMsgValue);\\n\\n            uint256 minGas = msg.value > 0 ? MIN_GAS_WITH_VALUE() : MIN_GAS();\\n\\n            /// @dev Gas check before executing hypercore precompile operations. Can be retried from the endpoint with sufficient gas.\\n            /// @dev Contracts would need to called with more gas than this to account for the code above this line.\\n            if (gasleft() < minGas) revert InsufficientGas(gasleft(), minGas);\\n\\n            /// @dev If HyperEVM -> HyperCore fails for HYPE OR ERC20 then we do a complete refund to the receiver on hyperevm\\n            /// @dev try...catch to safeguard against possible breaking hyperliquid pre-compile changes\\n            try this.handleTransfersToHyperCore{ value: msg.value }(_to, amountLD) {} catch {\\n                _refundToHyperEvm(_to, amountLD);\\n            }\\n        } catch {\\n            SendParam memory refundSendParam;\\n            refundSendParam.dstEid = OFTComposeMsgCodec.srcEid(_message);\\n            refundSendParam.to = OFTComposeMsgCodec.composeFrom(_message);\\n            refundSendParam.amountLD = amountLD;\\n\\n            failedMessages[_guid] = FailedMessage({ refundSendParam: refundSendParam, msgValue: msg.value });\\n            emit FailedMessageDecode(_guid, refundSendParam.to, msg.value, composeMsgEncoded);\\n        }\\n    }\\n\\n    /**\\n     * @notice Decodes the compose message to extract minMsgValue and receiver address\\n     * @param _composeMessage The encoded compose message\\n     * @return minMsgValue - The minimum message value required\\n     * @return to - The receiver address\\n     */\\n    function decodeMessage(bytes calldata _composeMessage) external pure returns (uint256 minMsgValue, address to) {\\n        if (_composeMessage.length != VALID_COMPOSE_MSG_LEN) revert ComposeMsgLengthNot64Bytes(_composeMessage.length);\\n\\n        (minMsgValue, to) = abi.decode(_composeMessage, (uint256, address));\\n    }\\n\\n    /**\\n     * @dev Transfers native and erc20 to HyperCore via asset bridge, then to receiver via CoreWriter. Returns dust to HyperEVM.\\n     * @dev If either fails then we complete refund the user on HyperEVM\\n     * @dev Default behavior checks if the user is activated on HyperCore in ERC20 transfer, if not then revert this call\\n     * @dev If the user requests for more funds than the asset bridge's balance we revert\\n     */\\n    function handleTransfersToHyperCore(address _to, uint256 _amountLD) external payable {\\n        if (msg.sender != address(this)) revert OnlySelf(msg.sender);\\n\\n        /// @dev Move ERC20 tokens into hyper core.\\n        _transferERC20ToHyperCore(_to, _amountLD);\\n\\n        /// @dev Move native funds into hyper core.\\n        if (msg.value > 0) _transferNativeToHyperCore(_to);\\n    }\\n\\n    /**\\n     * @notice Transfers ERC20 tokens to HyperCore\\n     * @notice Checks if the receiver's address is activated on HyperCore\\n     * @notice If the user requests for more funds than the asset bridge's balance we revert\\n     * @param _to The address to receive tokens on HyperCore\\n     * @param _amountLD The amount of tokens to transfer in LayerZero decimals\\n     */\\n    function _transferERC20ToHyperCore(address _to, uint256 _amountLD) internal virtual {\\n        IHyperAssetAmount memory amounts = quoteHyperCoreAmount(\\n            ERC20_CORE_INDEX_ID,\\n            ERC20_DECIMAL_DIFF,\\n            ERC20_ASSET_BRIDGE,\\n            _amountLD\\n        );\\n\\n        /// @dev Moving tokens to asset bridge credits the coreAccount of composer with the tokens.\\n        /// @dev The write call then moves coreSpot tokens from the composer to receiver\\n        if (amounts.evm != 0) {\\n            /// @dev This reverts if the user is not activated in the default case, else it simply returns `amounts.core`\\n            uint64 coreAmount = _getFinalCoreAmount(_to, amounts.core);\\n\\n            // Transfer the tokens to the composer's address on HyperCore\\n            IERC20(ERC20).safeTransfer(ERC20_ASSET_BRIDGE, amounts.evm);\\n\\n            _submitCoreWriterTransfer(_to, ERC20_CORE_INDEX_ID, coreAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers native HYPE tokens to HyperCore\\n     * @notice If the user requests for more funds than the asset bridge's balance we revert\\n     * @param _to The address to receive tokens on HyperCore\\n     */\\n    function _transferNativeToHyperCore(address _to) internal virtual {\\n        IHyperAssetAmount memory amounts = quoteHyperCoreAmount(\\n            NATIVE_CORE_INDEX_ID,\\n            NATIVE_DECIMAL_DIFF,\\n            NATIVE_ASSET_BRIDGE,\\n            msg.value\\n        );\\n\\n        if (amounts.evm != 0) {\\n            // Transfer the HYPE tokens to the composer's address on HyperCore\\n            (bool success, ) = payable(NATIVE_ASSET_BRIDGE).call{ value: amounts.evm }(\\\"\\\");\\n            if (!success) revert NativeTransferFailed(amounts.evm);\\n\\n            _submitCoreWriterTransfer(_to, NATIVE_CORE_INDEX_ID, amounts.core);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the receiver's address is activated on HyperCore\\n     * @notice To be overriden on FeeToken or other implementations since this can be used to activate tokens\\n     * @dev Default behavior is to revert if the user's account is NOT activated\\n     * @param _to The address to check\\n     * @param _coreAmount The core amount to transfer\\n     * @return The final core amount to transfer (same as _coreAmount in default impl)\\n     */\\n    function _getFinalCoreAmount(address _to, uint64 _coreAmount) internal view virtual returns (uint64) {\\n        if (!coreUserExists(_to).exists) revert CoreUserNotActivated();\\n        return _coreAmount;\\n    }\\n\\n    /**\\n     * @notice External function to quote the conversion of evm tokens to hypercore tokens\\n     * @param _coreIndexId The core index id of the token to transfer\\n     * @param _decimalDiff The decimal difference of evmDecimals - coreDecimals\\n     * @param _bridgeAddress The asset bridge address of the token to transfer\\n     * @param _amountLD The number of tokens that the composer received (pre-dusted) that we are trying to send\\n     * @return IHyperAssetAmount - The amount of tokens to send to HyperCore (scaled on evm), dust (to be refunded), and the swap amount (of the tokens scaled on hypercore)\\n     */\\n    function quoteHyperCoreAmount(\\n        uint64 _coreIndexId,\\n        int8 _decimalDiff,\\n        address _bridgeAddress,\\n        uint256 _amountLD\\n    ) public view returns (IHyperAssetAmount memory) {\\n        uint64 bridgeBalance = spotBalance(_bridgeAddress, _coreIndexId).total;\\n        return _amountLD.into_hyperAssetAmount(bridgeBalance, _decimalDiff);\\n    }\\n\\n    /**\\n     * @notice Handles refunds to HyperEVM for both HYPE and ERC20 tokens to the initial recipient\\n     * @param _refundAddress The address to refund tokens to\\n     * @param _amountLD The amount of ERC20 tokens to refund\\n     */\\n    function _refundToHyperEvm(address _refundAddress, uint256 _amountLD) internal virtual {\\n        if (msg.value != 0) {\\n            (bool success1, ) = _refundAddress.call{ value: msg.value }(\\\"\\\");\\n            if (!success1) {\\n                (bool success2, ) = tx.origin.call{ value: msg.value }(\\\"\\\");\\n                if (!success2) revert NativeTransferFailed(msg.value);\\n            }\\n        }\\n\\n        if (_amountLD != 0) IERC20(ERC20).safeTransfer(_refundAddress, _amountLD);\\n    }\\n\\n    /**\\n     * @notice Refunds failed messages to the source chain\\n     * @param _guid The GUID of the failed message to refund\\n     */\\n    function refundToSrc(bytes32 _guid) external payable virtual {\\n        FailedMessage memory failedMessage = failedMessages[_guid];\\n        if (failedMessage.refundSendParam.dstEid == 0) revert FailedMessageNotFound(_guid);\\n\\n        delete failedMessages[_guid];\\n\\n        uint256 totalMsgValue = failedMessage.msgValue + msg.value;\\n\\n        /// @dev Triggers a refund via the OFT with the refundSendParam for the ERC20 amt\\n        /// @dev msg.value, if any was passed is used to pay the layerzero message fee and excess refunded to tx.origin\\n        IOFT(OFT).send{ value: totalMsgValue }(\\n            failedMessage.refundSendParam,\\n            MessagingFee(totalMsgValue, 0),\\n            tx.origin\\n        );\\n\\n        emit RefundSuccessful(_guid);\\n    }\\n\\n    /**\\n     * @dev Minimum gas to be supplied to the composer contract for execution to prevent Out of Gas.\\n     * @dev This is used when the compose message does NOT have msg.value to send user funds to the receiver on core.\\n     * @dev This is the minimum gas amt for the compose operations which means the contract should be called with some more gas.\\n     * @return The minimum gas amount\\n     */\\n    function MIN_GAS() public virtual returns (uint256) {\\n        return 150_000;\\n    }\\n\\n    /**\\n     * @dev Minimum gas to be supplied to the composer contract for execution to prevent Out of Gas.\\n     * @dev This is used when the compose message has msg.value to send user funds to the receiver on core.\\n     * @dev This is the minimum gas amt for the compose operations which means the contract should be called with some more gas.\\n     * @return The minimum gas amount\\n     */\\n    function MIN_GAS_WITH_VALUE() public virtual returns (uint256) {\\n        return 200_000;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xf569e057722b7483ab478d9642e05f6a34f44855d16718ec57b062dca5538f3e\",\"license\":\"MIT\"},\"@layerzerolabs/hyperliquid-composer/contracts/HyperLiquidCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ICoreWriter } from \\\"./interfaces/ICoreWriter.sol\\\";\\n\\nstruct SpotBalance {\\n    uint64 total;\\n    uint64 hold; // Unused in this implementation\\n    uint64 entryNtl; // Unused in this implementation\\n}\\n\\nstruct CoreUserExists {\\n    bool exists;\\n}\\n\\n/**\\n * @title HyperLiquidCore\\n * @author Hyperliquid + LayerZero Labs (@shankars99)\\n * @notice This contract is a reduced and combined form of the L1Read and CoreWriter precompiles from the Hyperliquid team.\\n */\\nabstract contract HyperLiquidCore {\\n    // Chain IDs\\n    // https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/hyperevm#mainnet\\n    uint256 internal constant HYPE_CHAIN_ID_MAINNET = 999;\\n\\n    // Core Indexes\\n    // https://app.hyperliquid-testnet.xyz/explorer/token/0x7317beb7cceed72ef0b346074cc8e7ab\\n    uint64 internal constant HYPE_CORE_INDEX_TESTNET = 1105;\\n    // https://app.hyperliquid.xyz/explorer/token/0x0d01dc56dcaaca66ad901c959b4011ec\\n    uint64 internal constant HYPE_CORE_INDEX_MAINNET = 150;\\n\\n    /// @dev uint8 HYPE_EVM_DECIMALS = 18;\\n    /// @dev uint8 HYPE_CORE_DECIMALS = 8;\\n    int8 internal constant HYPE_DECIMAL_DIFF = 10; // Pre-computed for gas efficiency\\n    address internal constant HYPE_ASSET_BRIDGE = 0x2222222222222222222222222222222222222222;\\n\\n    // Precompile Addresses\\n    address internal constant HLP_CORE_WRITER = 0x3333333333333333333333333333333333333333;\\n    address internal constant SPOT_BALANCE_PRECOMPILE_ADDRESS = 0x0000000000000000000000000000000000000801;\\n    address internal constant CORE_USER_EXISTS_PRECOMPILE_ADDRESS = 0x0000000000000000000000000000000000000810;\\n\\n    /// @dev Pre-computed headers for gas efficiency\\n    /// @dev bytes1 CORE_WRITER_VERSION = 0x01;\\n    /// @dev bytes3 SPOT_SEND_ACTION_ID = 0x000006;\\n    bytes4 public constant SPOT_SEND_HEADER = 0x01000006; // Pre-computed concatenation\\n\\n    function spotBalance(address user, uint64 token) public view returns (SpotBalance memory) {\\n        (bool success, bytes memory result) = SPOT_BALANCE_PRECOMPILE_ADDRESS.staticcall(abi.encode(user, token));\\n        require(success, \\\"SpotBalance precompile call failed\\\");\\n        return abi.decode(result, (SpotBalance));\\n    }\\n\\n    function coreUserExists(address user) public view returns (CoreUserExists memory) {\\n        (bool success, bytes memory result) = CORE_USER_EXISTS_PRECOMPILE_ADDRESS.staticcall(abi.encode(user));\\n        require(success, \\\"Core user exists precompile call failed\\\");\\n        return abi.decode(result, (CoreUserExists));\\n    }\\n\\n    /**\\n     * @notice Transfers tokens on HyperCore using the CoreWriter precompile\\n     * @param _to The address to receive tokens on HyperCore\\n     * @param _coreIndex The core index of the token\\n     * @param _coreAmount The amount to transfer on HyperCore\\n     */\\n    function _submitCoreWriterTransfer(address _to, uint64 _coreIndex, uint64 _coreAmount) internal virtual {\\n        bytes memory action = abi.encode(_to, _coreIndex, _coreAmount);\\n        bytes memory payload = abi.encodePacked(SPOT_SEND_HEADER, action);\\n        /// Transfers HYPE tokens from the composer address on HyperCore to the _to via the SpotSend precompile\\n        ICoreWriter(HLP_CORE_WRITER).sendRawAction(payload);\\n    }\\n}\\n\",\"keccak256\":\"0x8b3ef77a81d3e487306e7c5ee70d47899c45b30a08073d784290dfeefc329726\",\"license\":\"MIT\"},\"@layerzerolabs/hyperliquid-composer/contracts/extensions/RecoverableComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IOFT } from \\\"@layerzerolabs/oft-evm/contracts/interfaces/IOFT.sol\\\";\\nimport { ICoreWriter } from \\\"../interfaces/ICoreWriter.sol\\\";\\nimport { IRecoverableComposer } from \\\"../interfaces/IRecoverableComposer.sol\\\";\\n\\nimport { HyperLiquidComposerCodec } from \\\"../library/HyperLiquidComposerCodec.sol\\\";\\nimport { HyperLiquidComposer } from \\\"../HyperLiquidComposer.sol\\\";\\n\\n/**\\n * @title Recoverable Composer\\n * @author LayerZero Labs (@shankars99)\\n * @notice Extension contract providing emergency recovery functionality for HyperLiquid Composer\\n * @dev Abstract contract that adds recovery mechanisms for both HyperEVM and HyperCore assets\\n * @dev Allows authorized recovery of stuck tokens from both EVM side and Core side of the bridge\\n * @dev Should be inherited by HyperLiquidComposer implementations that require emergency recovery\\n */\\nabstract contract RecoverableComposer is HyperLiquidComposer, IRecoverableComposer {\\n    using SafeERC20 for IERC20;\\n    using HyperLiquidComposerCodec for uint64;\\n\\n    /**\\n     * @notice Restricts access to recovery operations to the designated recovery address\\n     * @dev Ensures only authorized personnel can perform emergency recovery operations\\n     */\\n    modifier onlyRecoveryAddress() {\\n        if (msg.sender != RECOVERY_ADDRESS) revert NotRecoveryAddress();\\n        _;\\n    }\\n\\n    /// @notice Constant indicating a full transfer of available balance\\n    uint256 public constant FULL_TRANSFER = 0;\\n\\n    /// @notice Core index ID for USDC on HyperLiquid\\n    uint64 public constant USDC_CORE_INDEX = 0;\\n\\n    /// @notice Address authorized to perform recovery operations\\n    address public immutable RECOVERY_ADDRESS;\\n\\n    /**\\n     * @notice Constructor for RecoverableComposer\\n     * @param _recoveryAddress Address that will be authorized to perform recovery operations\\n     */\\n    constructor(address _recoveryAddress) {\\n        RECOVERY_ADDRESS = _recoveryAddress;\\n    }\\n\\n    /**\\n     * @notice Retrieves ERC20 tokens from HyperCore back to the asset bridge address\\n     * @dev Transfers tokens from the composer's HyperCore balance to the OFT asset bridge\\n     * @dev Can only be called by the recovery address\\n     * @param _coreAmount Amount of tokens to retrieve in HyperCore decimals, or FULL_TRANSFER for all\\n     */\\n    function retrieveCoreERC20(uint64 _coreAmount) public onlyRecoveryAddress {\\n        uint64 maxTransferAmt = _getMaxTransferAmount(ERC20_CORE_INDEX_ID, _coreAmount);\\n\\n        _submitCoreWriterTransfer(ERC20_ASSET_BRIDGE, ERC20_CORE_INDEX_ID, maxTransferAmt);\\n        emit Retrieved(ERC20_CORE_INDEX_ID, maxTransferAmt, ERC20_ASSET_BRIDGE);\\n    }\\n\\n    /**\\n     * @notice Retrieves HYPE tokens from HyperCore back to the HYPE asset bridge address\\n     * @dev Transfers HYPE tokens from the composer's HyperCore balance to the HYPE asset bridge\\n     * @dev Can only be called by the recovery address\\n     * @param _coreAmount Amount of HYPE tokens to retrieve in HyperCore decimals, or FULL_TRANSFER for all\\n     */\\n    function retrieveCoreHYPE(uint64 _coreAmount) public onlyRecoveryAddress {\\n        uint64 maxTransferAmt = _getMaxTransferAmount(NATIVE_CORE_INDEX_ID, _coreAmount);\\n\\n        _submitCoreWriterTransfer(NATIVE_ASSET_BRIDGE, NATIVE_CORE_INDEX_ID, maxTransferAmt);\\n        emit Retrieved(NATIVE_CORE_INDEX_ID, maxTransferAmt, NATIVE_ASSET_BRIDGE);\\n    }\\n\\n    /**\\n     * @notice Retrieves USDC tokens from HyperCore to a specified address\\n     * @dev Transfers USDC tokens from the composer's HyperCore balance to the specified address\\n     * @dev Can only be called by the recovery address\\n     * @param _coreAmount Amount of USDC tokens to retrieve in HyperCore decimals, or FULL_TRANSFER for all\\n     * @param _to Destination address to receive the retrieved USDC tokens\\n     */\\n    function retrieveCoreUSDC(uint64 _coreAmount, address _to) public onlyRecoveryAddress {\\n        uint64 maxTransferAmt = _getMaxTransferAmount(USDC_CORE_INDEX, _coreAmount);\\n\\n        _submitCoreWriterTransfer(_to, USDC_CORE_INDEX, maxTransferAmt);\\n        emit Retrieved(USDC_CORE_INDEX, maxTransferAmt, _to);\\n    }\\n\\n    /**\\n     * @notice Recovers ERC20 tokens from HyperEVM to the recovery address\\n     * @dev Convenience function that recovers tokens to the recovery address\\n     * @dev Can only be called by the recovery address\\n     * @param _evmAmount Amount of ERC20 tokens to recover in EVM decimals, or FULL_TRANSFER for all\\n     */\\n    function recoverEvmERC20(uint256 _evmAmount) public onlyRecoveryAddress {\\n        uint256 recoverAmt = _evmAmount == FULL_TRANSFER ? IERC20(ERC20).balanceOf(address(this)) : _evmAmount;\\n\\n        IERC20(ERC20).safeTransfer(RECOVERY_ADDRESS, recoverAmt);\\n        emit Recovered(RECOVERY_ADDRESS, recoverAmt);\\n    }\\n\\n    /**\\n     * @notice Recovers native tokens from HyperEVM to the recovery address\\n     * @dev Convenience function that recovers native tokens to the recovery address\\n     * @dev Can only be called by the recovery address\\n     * @param _evmAmount Amount of native tokens to recover in wei, or FULL_TRANSFER for all\\n     */\\n    function recoverEvmNative(uint256 _evmAmount) public onlyRecoveryAddress {\\n        uint256 recoverAmt = _evmAmount == FULL_TRANSFER ? address(this).balance : _evmAmount;\\n\\n        (bool success, ) = RECOVERY_ADDRESS.call{ value: recoverAmt }(\\\"\\\");\\n        if (!success) revert TransferFailed();\\n        emit Recovered(RECOVERY_ADDRESS, recoverAmt);\\n    }\\n\\n    /**\\n     * @notice Internal function to calculate the maximum transferable amount\\n     * @dev Validates that the requested amount doesn't exceed available balance\\n     * @param _coreIndexId The core index ID of the token to check\\n     * @param _coreAmount The requested amount to transfer, or FULL_TRANSFER for all available\\n     * @return The actual amount that can be transferred\\n     */\\n    function _getMaxTransferAmount(uint64 _coreIndexId, uint64 _coreAmount) internal view returns (uint64) {\\n        uint64 maxTransferAmt = spotBalance(address(this), _coreIndexId).total;\\n        if (_coreAmount > maxTransferAmt) {\\n            revert MaxRetrieveAmountExceeded(maxTransferAmt, _coreAmount);\\n        }\\n        return _coreAmount == FULL_TRANSFER ? maxTransferAmt : _coreAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xba8938812eb3e172a27b589823484c780a3fa2dd27d77b41f19be7410eb31e25\",\"license\":\"MIT\"},\"@layerzerolabs/hyperliquid-composer/contracts/interfaces/ICoreWriter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICoreWriter {\\n    event RawAction(address indexed user, bytes data);\\n\\n    function sendRawAction(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x8faa15935746558808a46034a124ae465b941a68a5a723d2ba474400bb412eb3\",\"license\":\"MIT\"},\"@layerzerolabs/hyperliquid-composer/contracts/interfaces/IHyperLiquidComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { SendParam } from \\\"@layerzerolabs/oft-evm/contracts/interfaces/IOFT.sol\\\";\\n\\nstruct IHyperAssetAmount {\\n    uint256 evm;\\n    uint64 core;\\n    uint64 coreBalanceAssetBridge;\\n}\\n\\nstruct FailedMessage {\\n    SendParam refundSendParam;\\n    uint256 msgValue;\\n}\\n\\ninterface IHyperLiquidComposer {\\n    /// ----------------------------------- EVENTS -----------------------------------\\n    event RefundSuccessful(bytes32 indexed guid);\\n\\n    event FailedMessageDecode(bytes32 indexed guid, bytes32 sender, uint256 msgValue, bytes composeMessage);\\n\\n    event CompleteRefund();\\n    event RefundHyperEVM(address indexed receiver, uint256 indexed amountERC20, uint256 indexed amountHYPE);\\n\\n    /// ----------------------------------- ERRORS -----------------------------------\\n    error InsufficientGas(uint256 gasLeft, uint256 minGas);\\n\\n    error InvalidOFTAddress();\\n    error InvalidDecimalDiff(int8 decimalDiff, int8 minDecimalDiff, int8 maxDecimalDiff);\\n\\n    error OnlyEndpoint();\\n    error InvalidComposeCaller(address internalOFTAddress, address receivedOFTAddress);\\n    error OnlySelf(address caller);\\n\\n    error InsufficientMsgValue(uint256 msgValue, uint256 requiredValue);\\n    error ComposeMsgLengthNot64Bytes(uint256 length);\\n\\n    error CoreUserNotActivated();\\n    error NativeTransferFailed(uint256 amount);\\n\\n    error SpotBalanceReadFailed(address user, uint64 tokenId);\\n\\n    error FailedMessageNotFound(bytes32 guid);\\n\\n    /// ------------------------ CONSTANTS/VARIABLES/FUNCTIONS ------------------------\\n    function MIN_GAS() external returns (uint256);\\n    function MIN_GAS_WITH_VALUE() external returns (uint256);\\n\\n    function VALID_COMPOSE_MSG_LEN() external view returns (uint256);\\n\\n    function ENDPOINT() external view returns (address);\\n    function OFT() external view returns (address);\\n    function ERC20() external view returns (address);\\n\\n    function decodeMessage(bytes calldata composeMessage) external pure returns (uint256 minMsgValue, address receiver);\\n\\n    function refundToSrc(bytes32 guid) external payable;\\n\\n    function quoteHyperCoreAmount(\\n        uint64 coreIndexId,\\n        int8 decimalDiff,\\n        address bridgeAddress,\\n        uint256 amountLD\\n    ) external view returns (IHyperAssetAmount memory);\\n}\\n\",\"keccak256\":\"0xecaf495037b2a136f90e58dacb4f94c50bd26a5d71e6630858fc61666cb44136\",\"license\":\"MIT\"},\"@layerzerolabs/hyperliquid-composer/contracts/interfaces/IRecoverableComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IRecoverable Composer Interface\\n * @author LayerZero Labs\\n * @notice Interface for emergency recovery functionality in HyperLiquid Composer\\n * @dev Defines the public API for recovery mechanisms for both HyperEVM and HyperCore assets\\n */\\ninterface IRecoverableComposer {\\n    error MaxRetrieveAmountExceeded(uint256 maxAmount, uint256 requestedAmount);\\n    error NotRecoveryAddress();\\n    error TransferFailed();\\n\\n    /// @dev Retrieved is the process of moving tokens at the composer from HyperCore to HyperEVM\\n    event Retrieved(uint64 indexed coreIndexId, uint256 amount, address indexed to);\\n    /// @dev Recovery is the process of pulling tokens from the composer on hyperevm to the recovery address\\n    event Recovered(address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Constant indicating a full transfer of available balance\\n     * @return The constant value (0) representing full transfer\\n     */\\n    function FULL_TRANSFER() external view returns (uint256);\\n\\n    /**\\n     * @notice Core index ID for USDC on HyperLiquid\\n     * @return The USDC core index ID\\n     */\\n    function USDC_CORE_INDEX() external view returns (uint64);\\n\\n    /**\\n     * @notice Address authorized to perform recovery operations\\n     * @return The recovery address\\n     */\\n    function RECOVERY_ADDRESS() external view returns (address);\\n\\n    /**\\n     * @notice Retrieves ERC20 tokens from HyperCore back to the asset bridge address\\n     * @dev Transfers tokens from the composer's HyperCore balance to the OFT asset bridge\\n     * @dev Can only be called by the recovery address\\n     * @param _coreAmount Amount of tokens to retrieve in HyperCore decimals, or FULL_TRANSFER for all\\n     */\\n    function retrieveCoreERC20(uint64 _coreAmount) external;\\n\\n    /**\\n     * @notice Retrieves HYPE tokens from HyperCore back to the HYPE asset bridge address\\n     * @dev Transfers HYPE tokens from the composer's HyperCore balance to the HYPE asset bridge\\n     * @dev Can only be called by the recovery address\\n     * @param _coreAmount Amount of HYPE tokens to retrieve in HyperCore decimals, or FULL_TRANSFER for all\\n     */\\n    function retrieveCoreHYPE(uint64 _coreAmount) external;\\n\\n    /**\\n     * @notice Retrieves USDC tokens from HyperCore to a specified address\\n     * @dev Transfers USDC tokens from the composer's HyperCore balance to the specified address\\n     * @dev Can only be called by the recovery address\\n     * @param _coreAmount Amount of USDC tokens to retrieve in HyperCore decimals, or FULL_TRANSFER for all\\n     * @param _to Destination address to receive the retrieved USDC tokens\\n     */\\n    function retrieveCoreUSDC(uint64 _coreAmount, address _to) external;\\n\\n    /**\\n     * @notice Recovers ERC20 tokens from HyperEVM to the recovery address\\n     * @dev Convenience function that recovers tokens to the recovery address\\n     * @dev Can only be called by the recovery address\\n     * @param _evmAmount Amount of ERC20 tokens to recover in EVM decimals, or FULL_TRANSFER for all\\n     */\\n    function recoverEvmERC20(uint256 _evmAmount) external;\\n\\n    /**\\n     * @notice Recovers native tokens from HyperEVM to the recovery address\\n     * @dev Convenience function that recovers native tokens to the recovery address\\n     * @dev Can only be called by the recovery address\\n     * @param _evmAmount Amount of native tokens to recover in wei, or FULL_TRANSFER for all\\n     */\\n    function recoverEvmNative(uint256 _evmAmount) external;\\n}\\n\",\"keccak256\":\"0x7647a01afad6b68ab8d1d29de196ef898da26a21e2c6ad3e633c472f4bc109b9\",\"license\":\"MIT\"},\"@layerzerolabs/hyperliquid-composer/contracts/library/HyperLiquidComposerCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IHyperAssetAmount } from \\\"../interfaces/IHyperLiquidComposer.sol\\\";\\n\\n/**\\n * @title HyperLiquidComposerCodec\\n * @author LayerZero Labs (@shankars99)\\n * @notice Library for computing hyperliquid asset bridges, and converting between EVM and HyperCore amounts\\n */\\nlibrary HyperLiquidComposerCodec {\\n    error TransferAmtExceedsAssetBridgeBalance(uint256 amt, uint256 maxAmt);\\n\\n    /// @dev The base asset bridge address is the address of the HyperLiquid L1 contract\\n    /// @dev This is the address that the OFT contract will transfer the tokens to when we want to send tokens to HyperLiquid L1\\n    /// @dev https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/hyperevm/hypercore-less-than-greater-than-hyperevm-transfers#system-addresses\\n    address public constant BASE_ASSET_BRIDGE_ADDRESS = 0x2000000000000000000000000000000000000000;\\n    uint256 public constant BASE_ASSET_BRIDGE_ADDRESS_UINT256 = uint256(uint160(BASE_ASSET_BRIDGE_ADDRESS));\\n\\n    /**\\n     * @notice Converts a core index id to an asset bridge address\\n     * @notice This function is called by the HyperLiquidComposer contract\\n     * @param _coreIndexId The core index id to convert\\n     * @return _assetBridgeAddress The asset bridge address\\n     */\\n    function into_assetBridgeAddress(uint64 _coreIndexId) internal pure returns (address) {\\n        return address(uint160(BASE_ASSET_BRIDGE_ADDRESS_UINT256 + _coreIndexId));\\n    }\\n\\n    /**\\n     * @notice Converts an asset bridge address to a core index id\\n     * @param _assetBridgeAddress The asset bridge address to convert\\n     * @return _coreIndexId The core index id\\n     */\\n    function into_tokenId(address _assetBridgeAddress) internal pure returns (uint64) {\\n        return uint64(uint160(_assetBridgeAddress) - BASE_ASSET_BRIDGE_ADDRESS_UINT256);\\n    }\\n\\n    /**\\n     * @notice Converts an amount and an asset to a evm amount and core amount\\n     * @notice This function is called by the HyperLiquidComposer contract\\n     * @param _amount The amount to convert\\n     * @param _assetBridgeSupply The maximum amount transferable capped by the number of tokens located on the HyperCore's side of the asset bridge\\n     * @param _decimalDiff The decimal difference of evmDecimals - coreDecimals\\n     * @return IHyperAssetAmount memory - The evm amount and core amount\\n     */\\n    function into_hyperAssetAmount(\\n        uint256 _amount,\\n        uint64 _assetBridgeSupply,\\n        int8 _decimalDiff\\n    ) internal pure returns (IHyperAssetAmount memory) {\\n        uint256 amountEVM;\\n        uint64 amountCore;\\n\\n        /// @dev HyperLiquid decimal conversion: Scale EVM (u256,evmDecimals) -> Core (u64,coreDecimals)\\n        /// @dev Core amount is guaranteed to be within u64 range.\\n        if (_decimalDiff > 0) {\\n            (amountEVM, amountCore) = into_hyperAssetAmount_decimal_difference_gt_zero(\\n                _amount,\\n                _assetBridgeSupply,\\n                uint8(_decimalDiff)\\n            );\\n        } else {\\n            (amountEVM, amountCore) = into_hyperAssetAmount_decimal_difference_leq_zero(\\n                _amount,\\n                _assetBridgeSupply,\\n                uint8(-1 * _decimalDiff)\\n            );\\n        }\\n\\n        return IHyperAssetAmount({ evm: amountEVM, core: amountCore, coreBalanceAssetBridge: _assetBridgeSupply });\\n    }\\n\\n    /**\\n     * @notice Computes hyperAssetAmount when EVM decimals > Core decimals\\n     * @notice This function is called by the HyperLiquidComposer contract\\n     * @param _amount The amount to convert\\n     * @param _maxTransferableCoreAmount The maximum transferrable amount capped by the asset bridge has range [0,u64.max]\\n     * @param _decimalDiff The decimal difference between HyperEVM and HyperCore\\n     * @return amountEVM The EVM amount\\n     * @return amountCore The core amount\\n     */\\n    function into_hyperAssetAmount_decimal_difference_gt_zero(\\n        uint256 _amount,\\n        uint64 _maxTransferableCoreAmount,\\n        uint8 _decimalDiff\\n    ) internal pure returns (uint256 amountEVM, uint64 amountCore) {\\n        uint256 scale = 10 ** _decimalDiff;\\n        uint256 maxAmt = _maxTransferableCoreAmount * scale;\\n\\n        unchecked {\\n            /// @dev Strip out dust from _amount so that _amount and maxEvmAmountFromCoreMax have a maximum of _decimalDiff starting 0s\\n            amountEVM = _amount - (_amount % scale); // Safe: dustAmt = _amount % scale, so dust <= _amount\\n\\n            if (amountEVM > maxAmt) revert TransferAmtExceedsAssetBridgeBalance(amountEVM, maxAmt);\\n\\n            /// @dev Safe: Guaranteed to be in the range of [0, u64.max] because it is upperbounded by uint64 maxAmt\\n            amountCore = uint64(amountEVM / scale);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes hyperAssetAmount when EVM decimals < Core decimals and 0\\n     * @notice This function is called by the HyperLiquidComposer contract\\n     * @param _amount The amount to convert\\n     * @param _maxTransferableCoreAmount The maximum transferrable amount capped by the asset bridge\\n     * @param _decimalDiff The decimal difference between HyperEVM and HyperCore\\n     * @return amountEVM The EVM amount\\n     * @return amountCore The core amount\\n     */\\n    function into_hyperAssetAmount_decimal_difference_leq_zero(\\n        uint256 _amount,\\n        uint64 _maxTransferableCoreAmount,\\n        uint8 _decimalDiff\\n    ) internal pure returns (uint256 amountEVM, uint64 amountCore) {\\n        uint256 scale = 10 ** _decimalDiff;\\n        uint256 maxAmt = _maxTransferableCoreAmount / scale;\\n\\n        unchecked {\\n            amountEVM = _amount;\\n\\n            /// @dev When `Core > EVM` there will be no opening dust to strip out since all tokens in evm can be represented on core\\n            /// @dev Safe: Bound amountEvm to the range of [0, evmscaled u64.max]\\n            if (_amount > maxAmt) revert TransferAmtExceedsAssetBridgeBalance(amountEVM, maxAmt);\\n\\n            /// @dev Safe: Guaranteed to be in the range of [0, u64.max] because it is upperbounded by uint64 maxAmt\\n            amountCore = uint64(amountEVM * scale);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07050a19c7f7cb13876323fd73889322629fe9a3f16208ba805924579cdf5433\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title ILayerZeroComposer\\n */\\ninterface ILayerZeroComposer {\\n    /**\\n     * @notice Composes a LayerZero message from an OApp.\\n     * @dev To ensure non-reentrancy, implementers of this interface MUST assert msg.sender is the corresponding EndpointV2 contract (i.e., onlyEndpointV2).\\n     * @param _from The address initiating the composition, typically the OApp where the lzReceive was called.\\n     * @param _guid The unique identifier for the corresponding LayerZero src/dst tx.\\n     * @param _message The composed message payload in bytes. NOT necessarily the same payload passed via lzReceive.\\n     * @param _executor The address of the executor for the composed message.\\n     * @param _extraData Additional arbitrary data in bytes passed by the entity who executes the lzCompose.\\n     */\\n    function lzCompose(\\n        address _from,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xfaca7205d4211ee9208a7e59171e2301731f3d2a20c49b4a839821871f5fdd49\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroComposer } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroComposer.sol\\\";\\n\\n/**\\n * @title IOAppComposer\\n * @dev This interface defines the OApp Composer, allowing developers to inherit only the OApp package without the protocol.\\n */\\n// solhint-disable-next-line no-empty-blocks\\ninterface IOAppComposer is ILayerZeroComposer {}\\n\",\"keccak256\":\"0xe5014c411acb2b59dd74ae74a1bab02cf32d94a41a548a5ab553d64aeeb55dae\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oft-evm/contracts/interfaces/IOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { MessagingReceipt, MessagingFee } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\\\";\\n\\n/**\\n * @dev Struct representing token parameters for the OFT send() operation.\\n */\\nstruct SendParam {\\n    uint32 dstEid; // Destination endpoint ID.\\n    bytes32 to; // Recipient address.\\n    uint256 amountLD; // Amount to send in local decimals.\\n    uint256 minAmountLD; // Minimum amount to send in local decimals.\\n    bytes extraOptions; // Additional options supplied by the caller to be used in the LayerZero message.\\n    bytes composeMsg; // The composed message for the send() operation.\\n    bytes oftCmd; // The OFT command to be executed, unused in default OFT implementations.\\n}\\n\\n/**\\n * @dev Struct representing OFT limit information.\\n * @dev These amounts can change dynamically and are up the specific oft implementation.\\n */\\nstruct OFTLimit {\\n    uint256 minAmountLD; // Minimum amount in local decimals that can be sent to the recipient.\\n    uint256 maxAmountLD; // Maximum amount in local decimals that can be sent to the recipient.\\n}\\n\\n/**\\n * @dev Struct representing OFT receipt information.\\n */\\nstruct OFTReceipt {\\n    uint256 amountSentLD; // Amount of tokens ACTUALLY debited from the sender in local decimals.\\n    // @dev In non-default implementations, the amountReceivedLD COULD differ from this value.\\n    uint256 amountReceivedLD; // Amount of tokens to be received on the remote side.\\n}\\n\\n/**\\n * @dev Struct representing OFT fee details.\\n * @dev Future proof mechanism to provide a standardized way to communicate fees to things like a UI.\\n */\\nstruct OFTFeeDetail {\\n    int256 feeAmountLD; // Amount of the fee in local decimals.\\n    string description; // Description of the fee.\\n}\\n\\n/**\\n * @title IOFT\\n * @dev Interface for the OftChain (OFT) token.\\n * @dev Does not inherit ERC20 to accommodate usage by OFTAdapter as well.\\n * @dev This specific interface ID is '0x02e49c2c'.\\n */\\ninterface IOFT {\\n    // Custom error messages\\n    error InvalidLocalDecimals();\\n    error SlippageExceeded(uint256 amountLD, uint256 minAmountLD);\\n\\n    // Events\\n    event OFTSent(\\n        bytes32 indexed guid, // GUID of the OFT message.\\n        uint32 dstEid, // Destination Endpoint ID.\\n        address indexed fromAddress, // Address of the sender on the src chain.\\n        uint256 amountSentLD, // Amount of tokens sent in local decimals.\\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\\n    );\\n    event OFTReceived(\\n        bytes32 indexed guid, // GUID of the OFT message.\\n        uint32 srcEid, // Source Endpoint ID.\\n        address indexed toAddress, // Address of the recipient on the dst chain.\\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\\n    );\\n\\n    /**\\n     * @notice Retrieves interfaceID and the version of the OFT.\\n     * @return interfaceId The interface ID.\\n     * @return version The version.\\n     *\\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\\n     */\\n    function oftVersion() external view returns (bytes4 interfaceId, uint64 version);\\n\\n    /**\\n     * @notice Retrieves the address of the token associated with the OFT.\\n     * @return token The address of the ERC20 token implementation.\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\\n     * @return requiresApproval Needs approval of the underlying token implementation.\\n     *\\n     * @dev Allows things like wallet implementers to determine integration requirements,\\n     * without understanding the underlying token implementation.\\n     */\\n    function approvalRequired() external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the shared decimals of the OFT.\\n     * @return sharedDecimals The shared decimals of the OFT.\\n     */\\n    function sharedDecimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Provides the fee breakdown and settings data for an OFT. Unused in the default implementation.\\n     * @param _sendParam The parameters for the send operation.\\n     * @return limit The OFT limit information.\\n     * @return oftFeeDetails The details of OFT fees.\\n     * @return receipt The OFT receipt information.\\n     */\\n    function quoteOFT(\\n        SendParam calldata _sendParam\\n    ) external view returns (OFTLimit memory, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory);\\n\\n    /**\\n     * @notice Provides a quote for the send() operation.\\n     * @param _sendParam The parameters for the send() operation.\\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\\n     * @return fee The calculated LayerZero messaging fee from the send() operation.\\n     *\\n     * @dev MessagingFee: LayerZero msg fee\\n     *  - nativeFee: The native fee.\\n     *  - lzTokenFee: The lzToken fee.\\n     */\\n    function quoteSend(SendParam calldata _sendParam, bool _payInLzToken) external view returns (MessagingFee memory);\\n\\n    /**\\n     * @notice Executes the send() operation.\\n     * @param _sendParam The parameters for the send operation.\\n     * @param _fee The fee information supplied by the caller.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess funds from fees etc. on the src.\\n     * @return receipt The LayerZero messaging receipt from the send() operation.\\n     * @return oftReceipt The OFT receipt information.\\n     *\\n     * @dev MessagingReceipt: LayerZero msg receipt\\n     *  - guid: The unique identifier for the sent message.\\n     *  - nonce: The nonce of the sent message.\\n     *  - fee: The LayerZero fee incurred for the message.\\n     */\\n    function send(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory, OFTReceipt memory);\\n}\\n\",\"keccak256\":\"0x7ba6bb62fba7ee83451cfb0e727ddeef0e96b4388bd4e9ff0fc6ce103e1101c8\",\"license\":\"MIT\"},\"@layerzerolabs/oft-evm/contracts/libs/OFTComposeMsgCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary OFTComposeMsgCodec {\\n    // Offset constants for decoding composed messages\\n    uint8 private constant NONCE_OFFSET = 8;\\n    uint8 private constant SRC_EID_OFFSET = 12;\\n    uint8 private constant AMOUNT_LD_OFFSET = 44;\\n    uint8 private constant COMPOSE_FROM_OFFSET = 76;\\n\\n    /**\\n     * @dev Encodes a OFT composed message.\\n     * @param _nonce The nonce value.\\n     * @param _srcEid The source endpoint ID.\\n     * @param _amountLD The amount in local decimals.\\n     * @param _composeMsg The composed message.\\n     * @return _msg The encoded Composed message.\\n     */\\n    function encode(\\n        uint64 _nonce,\\n        uint32 _srcEid,\\n        uint256 _amountLD,\\n        bytes memory _composeMsg // 0x[composeFrom][composeMsg]\\n    ) internal pure returns (bytes memory _msg) {\\n        _msg = abi.encodePacked(_nonce, _srcEid, _amountLD, _composeMsg);\\n    }\\n\\n    /**\\n     * @dev Retrieves the nonce for the composed message.\\n     * @param _msg The message.\\n     * @return The nonce value.\\n     */\\n    function nonce(bytes calldata _msg) internal pure returns (uint64) {\\n        return uint64(bytes8(_msg[:NONCE_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the source endpoint ID for the composed message.\\n     * @param _msg The message.\\n     * @return The source endpoint ID.\\n     */\\n    function srcEid(bytes calldata _msg) internal pure returns (uint32) {\\n        return uint32(bytes4(_msg[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the amount in local decimals from the composed message.\\n     * @param _msg The message.\\n     * @return The amount in local decimals.\\n     */\\n    function amountLD(bytes calldata _msg) internal pure returns (uint256) {\\n        return uint256(bytes32(_msg[SRC_EID_OFFSET:AMOUNT_LD_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the composeFrom value from the composed message.\\n     * @param _msg The message.\\n     * @return The composeFrom value.\\n     */\\n    function composeFrom(bytes calldata _msg) internal pure returns (bytes32) {\\n        return bytes32(_msg[AMOUNT_LD_OFFSET:COMPOSE_FROM_OFFSET]);\\n    }\\n\\n    /**\\n     * @dev Retrieves the composed message.\\n     * @param _msg The message.\\n     * @return The composed message.\\n     */\\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\\n        return _msg[COMPOSE_FROM_OFFSET:];\\n    }\\n\\n    /**\\n     * @dev Converts an address to bytes32.\\n     * @param _addr The address to convert.\\n     * @return The bytes32 representation of the address.\\n     */\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    /**\\n     * @dev Converts bytes32 to an address.\\n     * @param _b The bytes32 value to convert.\\n     * @return The address representation of bytes32.\\n     */\\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\\n        return address(uint160(uint256(_b)));\\n    }\\n}\\n\",\"keccak256\":\"0xaae73d6eb8b9561c43f1802f3c416c00ccd35f172b711f9781ccdf1b25a40db5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/HyperLiquidComposer_V1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport { HyperLiquidComposer } from \\\"@layerzerolabs/hyperliquid-composer/contracts/HyperLiquidComposer.sol\\\";\\nimport { RecoverableComposer } from \\\"@layerzerolabs/hyperliquid-composer/contracts/extensions/RecoverableComposer.sol\\\";\\n\\n/**\\n * @title HyperLiquidComposer_V1\\n * @author LayerZero Labs (shankars99)\\n * @dev This contract is a composer that allows transfers of ERC20 and HYPE tokens to a target address on hypercore.\\n * @dev This contract does NOT refund dust to the receiver because we do not expect any due to truncation of sharedDecimals.\\n * @dev Incase of dust, you would have to implement dust refunds to the receiver in:\\n *      `_transferERC20ToHyperCore` and `_transferNativeToHyperCore`\\n *\\n * @dev Disclaimer: If the token's evm total supply exceeds the asset bridge's balance when scaled to EVM, it is possible\\n *      that the composer will not be able to send the tokens to the receiver address on hypercore due to bridge consumption.\\n *      Tokens would instead be returned to the sender address on HyperEVM. Front-end handling is recommended.\\n */\\ncontract HyperLiquidComposer_V1 is HyperLiquidComposer, RecoverableComposer {\\n    /**\\n     * @notice Constructor for the HyperLiquidComposer\\n     * @param _oft The address of the OFT\\n     * @param _hlIndexId The HyperLiquid core spot's index value\\n     * @param _assetDecimalDiff The difference in decimals between the HyperEVM's ERC20 and the HyperLiquid HIP-1 token\\n     *                 (i.e. 18 decimals on evm and 6 on HyperLiquid would be 18 - 6 = 12)\\n     * @param _recoveryAddress The address that will be authorized to perform recovery operations\\n     */\\n    constructor(\\n        address _oft,\\n        uint64 _hlIndexId,\\n        int8 _assetDecimalDiff,\\n        address _recoveryAddress\\n    ) HyperLiquidComposer(_oft, _hlIndexId, _assetDecimalDiff) RecoverableComposer(_recoveryAddress) {}\\n}\\n\",\"keccak256\":\"0x427be3435d26ed2f64be0adfe380b2427de3f138ec6ac2c1a1018eca228fb963\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "",
    "deployedBytecode": "",
    "devdoc": {
      "author": "LayerZero Labs (shankars99)",
      "details": "This contract is a composer that allows transfers of ERC20 and HYPE tokens to a target address on hypercore.This contract does NOT refund dust to the receiver because we do not expect any due to truncation of sharedDecimals.Incase of dust, you would have to implement dust refunds to the receiver in:      `_transferERC20ToHyperCore` and `_transferNativeToHyperCore`Disclaimer: If the token's evm total supply exceeds the asset bridge's balance when scaled to EVM, it is possible      that the composer will not be able to send the tokens to the receiver address on hypercore due to bridge consumption.      Tokens would instead be returned to the sender address on HyperEVM. Front-end handling is recommended.",
      "errors": {
        "ReentrancyGuardReentrantCall()": [
          {
            "details": "Unauthorized reentrant call."
          }
        ],
        "SafeERC20FailedOperation(address)": [
          {
            "details": "An operation with an ERC-20 token failed."
          }
        ]
      },
      "events": {
        "Recovered(address,uint256)": {
          "details": "Recovery is the process of pulling tokens from the composer on hyperevm to the recovery address"
        },
        "Retrieved(uint64,uint256,address)": {
          "details": "Retrieved is the process of moving tokens at the composer from HyperCore to HyperEVM"
        }
      },
      "kind": "dev",
      "methods": {
        "MIN_GAS()": {
          "details": "Minimum gas to be supplied to the composer contract for execution to prevent Out of Gas.This is used when the compose message does NOT have msg.value to send user funds to the receiver on core.This is the minimum gas amt for the compose operations which means the contract should be called with some more gas.",
          "returns": {
            "_0": "The minimum gas amount"
          }
        },
        "MIN_GAS_WITH_VALUE()": {
          "details": "Minimum gas to be supplied to the composer contract for execution to prevent Out of Gas.This is used when the compose message has msg.value to send user funds to the receiver on core.This is the minimum gas amt for the compose operations which means the contract should be called with some more gas.",
          "returns": {
            "_0": "The minimum gas amount"
          }
        },
        "constructor": {
          "params": {
            "_assetDecimalDiff": "The difference in decimals between the HyperEVM's ERC20 and the HyperLiquid HIP-1 token                 (i.e. 18 decimals on evm and 6 on HyperLiquid would be 18 - 6 = 12)",
            "_hlIndexId": "The HyperLiquid core spot's index value",
            "_oft": "The address of the OFT",
            "_recoveryAddress": "The address that will be authorized to perform recovery operations"
          }
        },
        "decodeMessage(bytes)": {
          "params": {
            "_composeMessage": "The encoded compose message"
          },
          "returns": {
            "minMsgValue": "- The minimum message value required",
            "to": "- The receiver address"
          }
        },
        "handleTransfersToHyperCore(address,uint256)": {
          "details": "Transfers native and erc20 to HyperCore via asset bridge, then to receiver via CoreWriter. Returns dust to HyperEVM.If either fails then we complete refund the user on HyperEVMDefault behavior checks if the user is activated on HyperCore in ERC20 transfer, if not then revert this callIf the user requests for more funds than the asset bridge's balance we revert"
        },
        "lzCompose(address,bytes32,bytes,address,bytes)": {
          "details": "This composer is designed to handle refunds to source to an EOA address and NOT a contractIf the HyperCore receiver is a contract on hyperevm, it is expected that you can control token balance via CoreWriter",
          "params": {
            "_message": "The encoded message content, expected to contain a composeMsg that decodes to type: (address receiver, uint256 msgValue)",
            "_oft": "The address of the OFT contract."
          }
        },
        "quoteHyperCoreAmount(uint64,int8,address,uint256)": {
          "params": {
            "_amountLD": "The number of tokens that the composer received (pre-dusted) that we are trying to send",
            "_bridgeAddress": "The asset bridge address of the token to transfer",
            "_coreIndexId": "The core index id of the token to transfer",
            "_decimalDiff": "The decimal difference of evmDecimals - coreDecimals"
          },
          "returns": {
            "_0": "IHyperAssetAmount - The amount of tokens to send to HyperCore (scaled on evm), dust (to be refunded), and the swap amount (of the tokens scaled on hypercore)"
          }
        },
        "recoverEvmERC20(uint256)": {
          "details": "Convenience function that recovers tokens to the recovery addressCan only be called by the recovery address",
          "params": {
            "_evmAmount": "Amount of ERC20 tokens to recover in EVM decimals, or FULL_TRANSFER for all"
          }
        },
        "recoverEvmNative(uint256)": {
          "details": "Convenience function that recovers native tokens to the recovery addressCan only be called by the recovery address",
          "params": {
            "_evmAmount": "Amount of native tokens to recover in wei, or FULL_TRANSFER for all"
          }
        },
        "refundToSrc(bytes32)": {
          "params": {
            "_guid": "The GUID of the failed message to refund"
          }
        },
        "retrieveCoreERC20(uint64)": {
          "details": "Transfers tokens from the composer's HyperCore balance to the OFT asset bridgeCan only be called by the recovery address",
          "params": {
            "_coreAmount": "Amount of tokens to retrieve in HyperCore decimals, or FULL_TRANSFER for all"
          }
        },
        "retrieveCoreHYPE(uint64)": {
          "details": "Transfers HYPE tokens from the composer's HyperCore balance to the HYPE asset bridgeCan only be called by the recovery address",
          "params": {
            "_coreAmount": "Amount of HYPE tokens to retrieve in HyperCore decimals, or FULL_TRANSFER for all"
          }
        },
        "retrieveCoreUSDC(uint64,address)": {
          "details": "Transfers USDC tokens from the composer's HyperCore balance to the specified addressCan only be called by the recovery address",
          "params": {
            "_coreAmount": "Amount of USDC tokens to retrieve in HyperCore decimals, or FULL_TRANSFER for all",
            "_to": "Destination address to receive the retrieved USDC tokens"
          }
        }
      },
      "title": "HyperLiquidComposer_V1",
      "version": 1
    },
    "userdoc": {
      "errors": {
        "InsufficientGas(uint256,uint256)": [
          {
            "notice": "----------------------------------- ERRORS -----------------------------------"
          }
        ]
      },
      "events": {
        "RefundSuccessful(bytes32)": {
          "notice": "----------------------------------- EVENTS -----------------------------------"
        }
      },
      "kind": "user",
      "methods": {
        "FULL_TRANSFER()": {
          "notice": "Constant indicating a full transfer of available balance"
        },
        "RECOVERY_ADDRESS()": {
          "notice": "Address authorized to perform recovery operations"
        },
        "USDC_CORE_INDEX()": {
          "notice": "Core index ID for USDC on HyperLiquid"
        },
        "constructor": {
          "notice": "Constructor for the HyperLiquidComposer"
        },
        "decodeMessage(bytes)": {
          "notice": "Decodes the compose message to extract minMsgValue and receiver address"
        },
        "lzCompose(address,bytes32,bytes,address,bytes)": {
          "notice": "Handles LayerZero compose operations for hypercore transfers with refund to source and refund on hyperevm functionality"
        },
        "quoteHyperCoreAmount(uint64,int8,address,uint256)": {
          "notice": "External function to quote the conversion of evm tokens to hypercore tokens"
        },
        "recoverEvmERC20(uint256)": {
          "notice": "Recovers ERC20 tokens from HyperEVM to the recovery address"
        },
        "recoverEvmNative(uint256)": {
          "notice": "Recovers native tokens from HyperEVM to the recovery address"
        },
        "refundToSrc(bytes32)": {
          "notice": "Refunds failed messages to the source chain"
        },
        "retrieveCoreERC20(uint64)": {
          "notice": "Retrieves ERC20 tokens from HyperCore back to the asset bridge address"
        },
        "retrieveCoreHYPE(uint64)": {
          "notice": "Retrieves HYPE tokens from HyperCore back to the HYPE asset bridge address"
        },
        "retrieveCoreUSDC(uint64,address)": {
          "notice": "Retrieves USDC tokens from HyperCore to a specified address"
        }
      },
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 3937,
          "contract": "contracts/HyperLiquidComposer_V1.sol:HyperLiquidComposer_V1",
          "label": "_status",
          "offset": 0,
          "slot": "0",
          "type": "t_uint256"
        },
        {
          "astId": 74,
          "contract": "contracts/HyperLiquidComposer_V1.sol:HyperLiquidComposer_V1",
          "label": "failedMessages",
          "offset": 0,
          "slot": "1",
          "type": "t_mapping(t_bytes32,t_struct(FailedMessage)1238_storage)"
        }
      ],
      "types": {
        "t_bytes32": {
          "encoding": "inplace",
          "label": "bytes32",
          "numberOfBytes": "32"
        },
        "t_bytes_storage": {
          "encoding": "bytes",
          "label": "bytes",
          "numberOfBytes": "32"
        },
        "t_mapping(t_bytes32,t_struct(FailedMessage)1238_storage)": {
          "encoding": "mapping",
          "key": "t_bytes32",
          "label": "mapping(bytes32 => struct FailedMessage)",
          "numberOfBytes": "32",
          "value": "t_struct(FailedMessage)1238_storage"
        },
        "t_struct(FailedMessage)1238_storage": {
          "encoding": "inplace",
          "label": "struct FailedMessage",
          "members": [
            {
              "astId": 1235,
              "contract": "contracts/HyperLiquidComposer_V1.sol:HyperLiquidComposer_V1",
              "label": "refundSendParam",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(SendParam)2798_storage"
            },
            {
              "astId": 1237,
              "contract": "contracts/HyperLiquidComposer_V1.sol:HyperLiquidComposer_V1",
              "label": "msgValue",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256"
            }
          ],
          "numberOfBytes": "256"
        },
        "t_struct(SendParam)2798_storage": {
          "encoding": "inplace",
          "label": "struct SendParam",
          "members": [
            {
              "astId": 2785,
              "contract": "contracts/HyperLiquidComposer_V1.sol:HyperLiquidComposer_V1",
              "label": "dstEid",
              "offset": 0,
              "slot": "0",
              "type": "t_uint32"
            },
            {
              "astId": 2787,
              "contract": "contracts/HyperLiquidComposer_V1.sol:HyperLiquidComposer_V1",
              "label": "to",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32"
            },
            {
              "astId": 2789,
              "contract": "contracts/HyperLiquidComposer_V1.sol:HyperLiquidComposer_V1",
              "label": "amountLD",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256"
            },
            {
              "astId": 2791,
              "contract": "contracts/HyperLiquidComposer_V1.sol:HyperLiquidComposer_V1",
              "label": "minAmountLD",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256"
            },
            {
              "astId": 2793,
              "contract": "contracts/HyperLiquidComposer_V1.sol:HyperLiquidComposer_V1",
              "label": "extraOptions",
              "offset": 0,
              "slot": "4",
              "type": "t_bytes_storage"
            },
            {
              "astId": 2795,
              "contract": "contracts/HyperLiquidComposer_V1.sol:HyperLiquidComposer_V1",
              "label": "composeMsg",
              "offset": 0,
              "slot": "5",
              "type": "t_bytes_storage"
            },
            {
              "astId": 2797,
              "contract": "contracts/HyperLiquidComposer_V1.sol:HyperLiquidComposer_V1",
              "label": "oftCmd",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes_storage"
            }
          ],
          "numberOfBytes": "224"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        },
        "t_uint32": {
          "encoding": "inplace",
          "label": "uint32",
          "numberOfBytes": "4"
        }
      }
    }
  }